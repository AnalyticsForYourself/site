---
import Layout from "../../../layouts/Layout.astro";
import { Icon } from "astro-icon/components";
import { getEntry } from "astro:content";
import type { DataEntryMap } from "astro:content";

export const prerender = false;

const { user, id } = Astro.params as { user: string; id: string };
const entry = await getEntry(user as keyof DataEntryMap, id);

const formatter = new Intl.DateTimeFormat("en-US", { dateStyle: "short" });

function parseData(dataArr: Record<string, string | number[]>) {
    const potentialData: Record<string, (number | string)[]> = {
        labels: [],
    };

    for (const [key, value] of Object.entries(dataArr.records)) {
        if (key === "timestamps")
            potentialData.labels.push(
                ...(value as number[]).map((n) =>
                    formatter.format(new Date(n)),
                ),
            );
        else {
            potentialData[key] = (potentialData[key] || []).concat(value);
        }
    }
    return potentialData;
}

const parsedData = parseData(entry?.data);
const data = JSON.stringify(parsedData || {});
const stats = ["kudos", "hits", "comments", "bookmarks", "chapters", "words"];
---

<Layout>
    <a href={`/dashboard/${user}`}
        ><Icon class="fs-4" name="eva:arrow-back-fill" />
        <span>Return to overview</span></a
    >
    <h1>Analytics for {entry?.data.title}</h1>
    {
        parsedData.kudos?.length < 5 && (
            <div class="alert alert-warning w-max-content">
                <h2 class="font-sans h4">
                    There aren't a lot of entries for this work, you might want to
                    come back in a couple of days!
                    <a href="/learnmore">Learn More</a>
                </h2>
            </div>
        )
    }
    <canvas id="ctx"></canvas>
    <fieldset>
        <legend>Controls</legend>
        <div class="fieldset">
            <div class="row gap-3">
                <button data-key="line">
                    Overview
                </button>
                {
                    stats.map((key) => (
                        <button data-key={key}>
                            {key[0].toUpperCase() + key.slice(1)}
                        </button>
                    ))
                }
            </div>
            <div class="row">
                <label for="limit">Number of Entries: </label>
                <select id="limit" class="form-control">
                    <option>1</option>
                    <option selected value="7">Last Week</option>
                    <option value="14">Last 2 Weeks</option>
                    <option value="30">Last Month</option>
                    <option value="60">Last 2 Months</option>
                    <option value="180">Last 6 Months</option>
                    <option value="365">Last Year</option>
                    <option value="*">All Time</option>
                </select>
            </div>
        </div>
    </fieldset>
    <canvas id="overview"></canvas>
</Layout>
<style>
    a {
        display: flex;
        column-gap: 0.25rem;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.25s ease;
        transition-property: color, column-gap;
        align-items: center;
    }
    a:hover {
        column-gap: 0.5rem;
    }
    legend {
        font-size: 1.25rem;
    }
    .fieldset {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        row-gap: 2ch;
        padding: 3ch;
    }
    button {
        background-color: var(--primary-300);
        border: unset;
        padding: 1ch 1.5ch;
        font-size: 1.15rem;
        color: white;
        font-weight: 600;
        border-radius: 4px;
        border: 3px solid var(--primary-400);
        flex-basis: auto;
        max-width: fit-content;
    }
    button[data-active] {
        background-color: var(--primary-900);
        color: var(--primary-50);
    }
</style>
<script is:inline id="chartData" type="application/json" set:html={data} />
<script>
    import { Chart, registerables } from "chart.js";
    // @ts-ignore: No types file, oh well
    import chartTrendline from "chartjs-plugin-trendline";

    Chart.register(...registerables);
    const ctx = document.getElementById("ctx")! as HTMLCanvasElement;
    const data = JSON.parse(
        document.querySelector<HTMLScriptElement>("#chartData")?.innerHTML ||
            "{}",
    );
    const limit = document.getElementById("limit")! as HTMLSelectElement;
    let currentType = "kudos";

    const limitData = (data: number[]) => {
        if (limit.value === "*") return data;
        const numLimit = parseInt(limit.value, 10);

        return data.slice(-numLimit);
    };

    function addTrendline() {
        return {
            trendlineLinear: {
                style: "rgb(43 ,66 ,255, 0.3)",
                lineStyle: "dotted|solid",
                width: 2,
            },
        }
    }

    function makeYScale() {
        return {
            type: 'linear',
            position: 'left',
            get suggestedMax():number {
                const max = Math.max(...limitData(data[currentType]))
                console.log({max});
                return max + 10;
            },
            get suggestedMin():number {
                const min = Math.min(...limitData(data[currentType]));
                console.log({ min });
                return Math.max(min - 10, 0);
            }
        }
    }

    const chart = new Chart(ctx, {
        type: "bar",
        data: {
            labels: data.labels,
            datasets: [
                {
                    get label() {
                        return currentType[0].toUpperCase() + currentType.slice(1);
                    },
                    get data() {
                        return limitData(data[currentType]);
                    },
                    yAxisID: 'y',
                    ...addTrendline()
                }
            ]
        },
        options: {
            scales: {
                // @ts-ignore
                y: {
                    ...makeYScale(),
                }
            }
        },
        plugins: [chartTrendline],
    });

    function getDataScales() {
        const scales:Record<string, Record<string, string|number|boolean|Record<string, boolean>>> = {};
        for (const [key, value] of Object.entries<number[]>(data)) {
            if (key === 'labels') continue;
            scales[key] = {
                type: 'linear',
                suggestedMin: Math.max(Math.min(...value) - 10, 0),
                suggestedMax: Math.max(...value) + 10,
                display: ['kudos','hits'].includes(key),
                position: key === 'kudos' ? 'right' : key === 'hits' ? 'left' : false,
                grid: {
                    drawOnChart: ['kudos','hits'].includes(key)
                }
            }
        }
        return scales;
    }

    const overview = new Chart(document.getElementById('overview') as HTMLCanvasElement, {
        type: 'line',
        data: {
            labels: data.labels,
            datasets: [
                {
                    label: 'Kudos',
                    yAxisID: 'kudos',
                    get data() {
                        const { yAxisID } = this as { yAxisID: string };
                        return limitData(data[yAxisID]);
                    }
                },
                {
                    label: 'Hits',
                    yAxisID: 'hits',
                    get data() {
                        const { yAxisID } = this as { yAxisID: string };
                        return limitData(data[yAxisID]);
                    }
                },
                {
                    label: 'Comments',
                    yAxisID: 'comments',
                    get data() {
                        const { yAxisID } = this as { yAxisID: string };
                        return limitData(data[yAxisID]);
                    }
                },
                {
                    yAxisID: 'bookmarks',
                    label: "Bookmarks",
                    get data() {
                        const { yAxisID } = this as { yAxisID: string };
                        return limitData(data[yAxisID]);
                    }
                },
                {
                    label: "Chapters",
                    yAxisID: 'chapters',
                    get data() {
                        const { yAxisID } = this as { yAxisID: string };
                        return limitData(data[yAxisID]);
                    }
                },
                {
                    label: "Words",
                    yAxisID: 'words',
                    get data() {
                        const { yAxisID } = this as { yAxisID: string };
                        return limitData(data[yAxisID]);
                    }
                }
            ]
        },
        options: {
            scales: {
                ...getDataScales()
            }
        }
    })

    // @ts-ignore
    document.addEventListener(
        "click",
        (event) => {
            const target = (event.target as HTMLElement).closest(
                "[data-key]",
            ) as HTMLButtonElement;

            if (!target) return;

            const type = target.dataset.key!;
            currentType = type;
            
            // @ts-ignore
            chart.options.scales.y = makeYScale()
            chart.update();
            document
                .querySelectorAll("button")
                .forEach((el) => el.removeAttribute("data-active"));
            target.dataset.active = "true";
        },
        true,
    );

    limit.addEventListener("change", () => {
        chart.data.labels = limitData(data.labels);
        chart.update();
        overview.update();
    });
</script>
