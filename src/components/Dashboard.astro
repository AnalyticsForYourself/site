---
import AnalyticsCard from '../components/AnalyticsCard.astro';
import { getCollection, getEntry } from 'astro:content';
import type { AnalyticsCardsProps } from './AnalyticsCard.astro';
export const prerender = true;
interface Props {
    user: number;
}
const analytics = await getCollection('analytics');
const userRelatedAnalytics = analytics.filter(({ id, data }) => {
    return data.user === Astro.props.user
})
function getLastRecord(id:string, title: string, record: Record<string, string|number[]>): AnalyticsCardsProps {
    
    const lastRecord: Record<string, string|number> = {
        title,
        id,
        userid: Astro.props.user
    };
    
    const entries = Object.entries(record);
    for (const [key, value] of entries) {
        if (typeof value === 'string') continue;
        lastRecord[key] = value.at(-1)!;
    }

    // @ts-ignore
    return lastRecord;
}
const relatedUserNameEntry = await getEntry('users', ''+Astro.props.user);
if (!relatedUserNameEntry?.data.user) return Astro.redirect('/');
const userName = relatedUserNameEntry.data.user;
const getPossessive = (name: string) => name.split('').at(-1) === 's' ? "'" : "'s"
---
<h1>{userName}{getPossessive(userName)} Analytics Dashboard</h1>
<ul>
    {userRelatedAnalytics.map(({ id, data }) => {
        return <AnalyticsCard {...getLastRecord(id, data.title, data.records)}  allRecords={data.records} />
    })}
</ul>
<style>
	ul {
		list-style-type: none;
		padding: 0;
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		gap: 3ch;
        padding-block-end: 5vh;
	}
</style>