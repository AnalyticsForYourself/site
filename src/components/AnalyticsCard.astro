---
export interface AnalyticsCardsProps {
    id: string;
    userid: number;
    title: string;
    kudos: number;
    bookmarks: number;
    comments: number;
    chapters: string;
    hits: number;
    allRecords: Record<string, number[]>;
}
interface Props extends AnalyticsCardsProps {}
const { id, userid, title, kudos, bookmarks, comments, hits, allRecords } = Astro.props;
const truncatedTitle = title.split(' ').slice(0, 10).join(' ');

const sRecords = Object.entries(allRecords).reduce((acc, [key, numArr]) => {
    acc[key] = JSON.stringify(numArr);
    return acc;
}, {} as Record<string, string>)
// @TODO add a sparkline graph to show the change in views per day
// @TODO Convert sparkline to using this https://mitjafelicijan.github.io/sparklines/ instead of all this JS
---
<work-card >
    <li class="analytics-card" id={`work${id}`}>
        <h2>{truncatedTitle.length === title.length ? title : `${truncatedTitle}...`}</h2>
        <ul class="stat-controls">
            <li><span>Kudos:</span> <button class="btn btn-text active" data-spark='kudos' type="button">{kudos}</button></li>
            <li><span>Bookmarks:</span> <button class="btn btn-text" data-spark='bookmarks' type="button">{bookmarks}</button></li>
            <li><span>Comments:</span> <button class="btn btn-text" data-spark='comments' type="button">{comments}</button></li>
            <li><span>Hits:</span> <button class="btn btn-text" data-spark='hits' type="button">{hits}</button></li>
        </ul>
        <spark-lines class="spark-kudos active" points={sRecords.kudos}></spark-lines>
        <spark-lines class="spark-bookmarks" points={sRecords.bookmarks}></spark-lines>
        <spark-lines class="spark-comments" points={sRecords.comments}></spark-lines>
        <spark-lines class="spark-hits" points={sRecords.hits}></spark-lines>
        <a href={`/dashboard/${userid}/${id}`}>View Analytics</a>
    </li>
</work-card>
<script>
    import {SparkLines} from '../lib/sparklines';
    SparkLines.define();
    customElements.define('work-card', class extends HTMLElement {
        connectedCallback() {
            this.addEventListener('click', (event) => {
                const target = event.target as HTMLElement
                const nextSpark = target.closest<HTMLButtonElement>('[data-spark]');
                if (!nextSpark) return;
                const nextSparkType = nextSpark.dataset.spark!;

                this.querySelectorAll('spark-lines').forEach(el => {
                    el.classList.toggle('active', el.className.indexOf(nextSparkType) !== -1)
                });
                this.querySelectorAll('.btn').forEach(el => el.classList.toggle('active', el.getAttribute('data-spark') === nextSparkType));
                
            }, true);
        }
    });
</script>
<style>
    ul {
        padding-left: 0;
        display: flex;
        list-style-type: none;
        gap: 1.5ch;
        font-size: 0.95rem;
        color: #121212;
        flex-wrap: wrap;
    }
    .stat-controls li {
        display: flex;
        align-items: center;
        gap: 0.5ch;
        font-family: var(--bs-font-sans-serif);
    }
    spark-lines:not(.active) {
        display: none;
    }
    .btn.active {
        background-color: var(--background-50);
        border-color: var(--background-50);
    }
    .analytics-card {
        container-type: inline-size;
        background-color: #fff;
        border-color: 1px solid var(--primary);
        padding: 1em 1.5em;
        display: flex;
        flex-flow: column;
        gap: 1ch;
        border-radius: 4px;
        > * {
            margin: 0;
        }
        h2 {
            font-size: clamp(1.2rem, 1rem + 3cqi, 2rem);
        }
    }
</style>