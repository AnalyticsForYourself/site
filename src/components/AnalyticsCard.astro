---
import { Icon } from 'astro-icon/components';
import Sparkline from './Sparkline.astro';
export interface AnalyticsCardsProps {
    id: string;
    userid: number;
    title: string;
    kudos: number;
    bookmarks: number;
    comments: number;
    chapters: string;
    hits: number;
    allRecords: Record<string, number[]>;
}
interface Props extends AnalyticsCardsProps {}
const { id, userid, title, kudos, bookmarks, comments, hits, allRecords } = Astro.props;
const truncatedTitle = title.split(' ').slice(0, 8).join(' ');
const formatter = Intl.NumberFormat('en-US');
---
<work-card>
    <li class="analytics-card" id={`work${id}`}>
        <h2>{truncatedTitle.length === title.length ? title : `${truncatedTitle}...`}</h2>
        <ul class="stat-controls">
            <li><span>Hits:</span> <button class="btn btn-text active" data-spark='hits' type="button">{formatter.format(hits)}</button></li>
            <li><span>Kudos:</span> <button class="btn btn-text " data-spark='kudos' type="button">{formatter.format(kudos)}</button></li>
            <li><span>Comments:</span> <button class="btn btn-text" data-spark='comments' type="button">{formatter.format(comments)}</button></li>
            <li><span>Bookmarks:</span> <button class="btn btn-text" data-spark='bookmarks' type="button">{formatter.format(bookmarks)}</button></li>
        </ul>
        <div>
            <Sparkline class="spark-hits active" points={allRecords.hits} />
            <Sparkline class="spark-kudos" points={allRecords.kudos} />
            <Sparkline class="spark-comments" points={allRecords.comments} />
            <Sparkline class="spark-bookmarks" points={allRecords.bookmarks} />
        </div>
        <a href={`/dashboard/${userid}/${id}`}><span>View Analytics</span> <Icon name="eva:arrow-forward-fill" /></a>
    </li>
</work-card>
<script>
    customElements.define('work-card', class extends HTMLElement {
        connectedCallback() {
            this.addEventListener('click', (event) => {
                const target = event.target as HTMLElement
                const nextSpark = target.closest<HTMLButtonElement>('[data-spark]');
                if (!nextSpark) return;
                const nextSparkType = nextSpark.dataset.spark!;

                this.querySelectorAll('.spark-line-container').forEach(el => {
                    el.classList.toggle('active', el.className.indexOf(nextSparkType) !== -1)
                });
                this.querySelectorAll('.btn').forEach(el => el.classList.toggle('active', el.getAttribute('data-spark') === nextSparkType));
                
            }, true);
        }
    });
</script>
<style>
    work-card {
        position: relative;
        .analytics-card {
            height: 100%;
            display: grid;
            grid-template-columns: 1fr;
            grid-template-rows: 4lh;
            grid-template-rows: 10ch;
            a {
                align-self: end;
            }
        }
    }
    ul {
        padding-left: 0;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        list-style-type: none;
        column-gap: 1.5ch;
        font-size: 0.95rem;
        color: #121212;
        flex-wrap: wrap;
    }
    .stat-controls li {
        display: flex;
        align-items: center;
        gap: 0.5ch;
        font-family: var(--bs-font-sans-serif);
    }
    a {
        font-family: var(--bs-font-sans-serif);
        font-weight: 600;
        display: flex;
        column-gap: 0.5ch;
        text-decoration: none;
        align-items: center;
        transition: all 0.25s ease 0.15s;
        transition-property: column-gap, color;
    }
    a::after {
        content: '';
        position: absolute;
        inset: 0;
        z-index: 1;
    }
    a:hover {
        column-gap: 1ch;
    }
    .spark-line-container:not(.active) {
        display: none;
    }
    .btn {
        position: relative;
        z-index: 10;
        padding: 0.5ch;
    }
    .btn:hover {
        background-color: var(--background-100);
    }
    .btn.active {
        background-color: var(--background-50);
        border-color: var(--background-50);
    }
    .analytics-card {
        container-type: inline-size;
        background-color: #fff;
        border-color: 1px solid var(--primary);
        padding: 1em 1.5em;
        display: flex;
        flex-flow: column;
        gap: 1ch;
        border-radius: 4px;
        transition: background-color 0.25s ease 0.15s;
        > * {
            margin: 0;
        }
        h2 {
            font-size: clamp(1.2rem, 1rem + 2.5cqi, 2rem);
        }
    }

    work-card:has(a:hover) .analytics-card {
        background-color: var(--background-100);
    }
</style>
